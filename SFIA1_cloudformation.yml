AWSTemplateFormatVersion: 2010-09-09
Description: Deploy a VPC with public/private subnets
Parameters:
  sfia1:
    Description: "Name of an existing EC2 KeyPair to enable SSH access to the instance"
    Type: "AWS::EC2::KeyPair::KeyName"
    ConstraintDescription: "must be the name of an existing EC2 KeyPair"
  MUser:
    Type: String
  MPass:
    Type: String
    NoEcho: true
  

Resources:
  EC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-0c5d439747971368d"
      InstanceType: "t2.micro"
      SecurityGroupIds:
      - !GetAtt InstanceSecurityGroup.GroupId
      KeyName: !Ref sfia1
      SubnetId: !Ref PublicSubnet1
      Tags:
      - Key: Name
        Value: "SFIA-EC2" 

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: "myVPC"
  
  InstanceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      Tags:
      - Key: "purpose"
        Value: "CloudFormationTesting"
      VpcId: !Ref VPC
      GroupDescription: "Enable SSH access via port 22"
      SecurityGroupIngress:
      - CidrIp: "0.0.0.0/0"
        Description: "Allowed from anywhere"
        FromPort: "22"
        ToPort: "22"
        IpProtocol: "tcp"
      - CidrIp: "0.0.0.0/0"
        Description: "Allow port 5000"
        FromPort: "5000"
        ToPort: "5000"
        IpProtocol: "tcp"
      - CidrIp: "0.0.0.0/0"
        Description: "Allow jenkins"
        FromPort: "8080"
        ToPort: "8080"
        IpProtocol: "tcp"
      - CidrIp: "0.0.0.0/0"
        Description: "MySQL"
        FromPort: "3306"
        ToPort: "3306"
        IpProtocol: "tcp"
      - CidrIp: "0.0.0.0/0"
        Description: "Allow http"
        FromPort: "80"
        ToPort: "80"
        IpProtocol: "tcp"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: myVPC Internet Gateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 1

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select 
        - '1'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: Private Subnet 1

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Route Table

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Route Table

  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  mydbsubnetgroup:
        Type: "AWS::RDS::DBSubnetGroup"
        Properties:
          DBSubnetGroupName: "dbsubnetgroup"
          DBSubnetGroupDescription: "description"
          SubnetIds:
          - !Ref PublicSubnet1
          - !Ref PrivateSubnet1          
          Tags:
          - Key: Name
            Value: DBSubnetGroup
  
  RDSInstance:
    Type: "AWS::RDS::DBInstance"
    Properties:
      AllocatedStorage: "100"
      DBInstanceClass: "db.t2.micro"
      Engine: "MySQL"
      Iops: "1000"
      MasterUsername: !Ref MUser
      MasterUserPassword: !Ref MPass
      DBSubnetGroupName: "dbsubnetgroup"
      Tags:
      - Key: Name
        Value: RDS
    DependsOn: "mydbsubnetgroup"
      
Outputs:
  VPC:
    Description: VPC
    Value: !Ref VPC
  AZ1:
    Description: Availability Zone 1
    Value: !GetAtt 
      - PublicSubnet1
      - AvailabilityZone
  RDSInstanceId:
    Description: "Instance Id of RDS Instance"
    Value: !Ref RDSInstance
  FirstEC2InstanceId:
    Description: "Instance Id of first EC2 Instance"
    Value: !Ref EC2Instance
